diff --git a/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/include/FreeRTOS.h b/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/include/FreeRTOS.h
index ceb469a..6cf17a2 100644
--- a/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/include/FreeRTOS.h
+++ b/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/include/FreeRTOS.h
@@ -160,6 +160,10 @@ extern "C" {
 	#define INCLUDE_uxTaskGetStackHighWaterMark2 0
 #endif
 
+#ifndef INCLUDE_pxTaskGetStackStart
+   #define INCLUDE_pxTaskGetStackStart 0
+#endif
+
 #ifndef INCLUDE_eTaskGetState
 	#define INCLUDE_eTaskGetState 0
 #endif
@@ -416,6 +420,22 @@ hold explicit before calling the code. */
 	#define tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 #endif
 
+#ifndef traceREADDED_TASK_TO_READY_STATE
+    #define traceREADDED_TASK_TO_READY_STATE( pxTCB )   traceMOVED_TASK_TO_READY_STATE( pxTCB )
+#endif
+
+#ifndef traceMOVED_TASK_TO_DELAYED_LIST
+    #define traceMOVED_TASK_TO_DELAYED_LIST()
+#endif
+
+#ifndef traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST
+    #define traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST()
+#endif
+
+#ifndef traceMOVED_TASK_TO_SUSPENDED_LIST
+    #define traceMOVED_TASK_TO_SUSPENDED_LIST( pxTCB )
+#endif
+
 #ifndef traceQUEUE_CREATE
 	#define traceQUEUE_CREATE( pxNewQueue )
 #endif
@@ -660,6 +680,18 @@ hold explicit before calling the code. */
 	#define traceTASK_NOTIFY_GIVE_FROM_ISR()
 #endif
 
+#ifndef traceISR_EXIT_TO_SCHEDULER
+    #define traceISR_EXIT_TO_SCHEDULER()
+#endif
+
+#ifndef traceISR_EXIT
+    #define traceISR_EXIT()
+#endif
+
+#ifndef traceISR_ENTER
+    #define traceISR_ENTER()
+#endif
+
 #ifndef traceSTREAM_BUFFER_CREATE_FAILED
 	#define traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer )
 #endif
diff --git a/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/include/portable.h b/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/include/portable.h
index a2099c3..6e1df31 100644
--- a/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/include/portable.h
+++ b/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/include/portable.h
@@ -179,6 +179,10 @@ BaseType_t xPortStartScheduler( void ) PRIVILEGED_FUNCTION;
  */
 void vPortEndScheduler( void ) PRIVILEGED_FUNCTION;
 
+
+/* new function */
+void vInitPrioGroupValue(void);
+
 /*
  * The structures and methods of manipulating the MPU are contained within the
  * port layer.
diff --git a/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/include/task.h b/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/include/task.h
index b0cc60b..a75f92e 100644
--- a/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/include/task.h
+++ b/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/include/task.h
@@ -1441,6 +1441,25 @@ TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) PRIVILEGED_FUNCTION; /*
  */
 UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 
+/**
+ * task.h
+ * <PRE>uint8_t* pxTaskGetStackStart( TaskHandle_t xTask);</PRE>
+ *
+ * INCLUDE_pxTaskGetStackStart must be set to 1 in FreeRTOSConfig.h for
+ * this function to be available.
+ *
+ * Returns the start of the stack associated with xTask.  That is,
+ * the highest stack memory address on architectures where the stack grows down
+ * from high memory, and the lowest memory address on architectures where the
+ * stack grows up from low memory.
+ *
+ * @param xTask Handle of the task associated with the stack returned.
+ * Set xTask to NULL to return the stack of the calling task.
+ *
+ * @return A pointer to the start of the stack.
+ */
+uint8_t* pxTaskGetStackStart( TaskHandle_t xTask) PRIVILEGED_FUNCTION;
+
 /**
  * task.h
  * <PRE>configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask );</PRE>
diff --git a/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/portable/GCC/ARM_CM33_NTZ/non_secure/port.c b/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/portable/GCC/ARM_CM33_NTZ/non_secure/port.c
index d029775..4d84d85 100644
--- a/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/portable/GCC/ARM_CM33_NTZ/non_secure/port.c
+++ b/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/portable/GCC/ARM_CM33_NTZ/non_secure/port.c
@@ -90,6 +90,11 @@
 	 * same a the core. */
 	#define portNVIC_SYSTICK_CLK_BIT		( 0 )
 #endif
+
+/* new definitions for vInitPrioGroupValue() */
+#define portPRIORITY_GROUP_MASK               ( 0x07UL << 8UL )
+#define portPRIGROUP_SHIFT                    ( 8UL )
+
 /*-----------------------------------------------------------*/
 
 /**
@@ -739,12 +744,20 @@ uint32_t ulPreviousMask;
 
 	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 	{
+	    traceISR_ENTER();
+
 		/* Increment the RTOS tick. */
 		if( xTaskIncrementTick() != pdFALSE )
 		{
+		    traceISR_EXIT_TO_SCHEDULER();
+
 			/* Pend a context switch. */
 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 		}
+		else
+		{
+		    traceISR_EXIT();
+		}
 	}
 	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 }
@@ -1022,6 +1035,82 @@ BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
 }
 /*-----------------------------------------------------------*/
 
+void vInitPrioGroupValue(void)
+{
+    /* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
+     * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
+    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
+
+    /* This port can be used on all revisions of the Cortex-M7 core other than
+     * the r0p1 parts.  r0p1 parts should use the port from the
+     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
+    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
+    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
+
+    #if ( configASSERT_DEFINED == 1 )
+        {
+            volatile uint32_t ulOriginalPriority;
+            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
+            volatile uint8_t ucMaxPriorityValue;
+
+            /* Determine the maximum priority from which ISR safe FreeRTOS API
+             * functions can be called.  ISR safe functions are those that end in
+             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
+             * ensure interrupt entry is as fast and simple as possible.
+             *
+             * Save the interrupt priority value that is about to be clobbered. */
+            ulOriginalPriority = *pucFirstUserPriorityRegister;
+
+            /* Determine the number of priority bits available.  First write to all
+             * possible bits. */
+            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
+
+            /* Read the value back to see how many bits stuck. */
+            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
+
+            /* Use the same mask on the maximum system call priority. */
+            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
+
+            /* Calculate the maximum acceptable priority group value for the number
+             * of bits read back. */
+            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
+
+            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
+            {
+                ulMaxPRIGROUPValue--;
+                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
+            }
+
+            #ifdef __NVIC_PRIO_BITS
+                {
+                    /* Check the CMSIS configuration that defines the number of
+                     * priority bits matches the number of priority bits actually queried
+                     * from the hardware. */
+                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
+                }
+            #endif
+
+            #ifdef configPRIO_BITS
+                {
+                    /* Check the FreeRTOS configuration that defines the number of
+                     * priority bits matches the number of priority bits actually queried
+                     * from the hardware. */
+                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
+                }
+            #endif
+
+            /* Shift the priority group value back to its position within the AIRCR
+             * register. */
+            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
+            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
+
+            /* Restore the clobbered interrupt priority register to its original
+             * value. */
+            *pucFirstUserPriorityRegister = ulOriginalPriority;
+        }
+    #endif /* conifgASSERT_DEFINED */
+}
+
 void vPortEndScheduler( void ) /* PRIVILEGED_FUNCTION */
 {
 	/* Not implemented in ports where there is nothing to return to.
@@ -1146,4 +1235,4 @@ BaseType_t xReturn;
 
 	return xReturn;
 }
-/*-----------------------------------------------------------*/
\ No newline at end of file
+/*-----------------------------------------------------------*/
diff --git a/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/portable/GCC/ARM_CM33_NTZ/non_secure/portmacro.h b/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/portable/GCC/ARM_CM33_NTZ/non_secure/portmacro.h
index 1d8fa3e..f52c231 100644
--- a/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/portable/GCC/ARM_CM33_NTZ/non_secure/portmacro.h
+++ b/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/portable/GCC/ARM_CM33_NTZ/non_secure/portmacro.h
@@ -212,7 +212,8 @@ typedef struct MPU_SETTINGS
 #define portYIELD()											vPortYield()
 #define portNVIC_INT_CTRL_REG								( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 #define portNVIC_PENDSVSET_BIT								( 1UL << 28UL )
-#define portEND_SWITCHING_ISR( xSwitchRequired )			if( xSwitchRequired ) portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT
+//#define portEND_SWITCHING_ISR( xSwitchRequired )			if( xSwitchRequired ) portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT
+#define portEND_SWITCHING_ISR( xSwitchRequired )            { if( xSwitchRequired != pdFALSE ) { traceISR_EXIT_TO_SCHEDULER(); portYIELD(); } else { traceISR_EXIT(); } }
 #define portYIELD_FROM_ISR( x )								portEND_SWITCHING_ISR( x )
 /*-----------------------------------------------------------*/
 
diff --git a/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/tasks.c b/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/tasks.c
index f6a6a9b..dede64e 100644
--- a/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/tasks.c
+++ b/workspace_rtos_cubeide/poc_uart/Third-Party/FreeRTOS/tasks.c
@@ -220,6 +220,17 @@ count overflows. */
 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) ); \
 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
+
+/*
+ * Place the task represented by pxTCB which has been in a ready list before
+ * into the appropriate ready list for the task.
+ * It is inserted at the end of the list.
+ */
+#define prvReaddTaskToReadyList( pxTCB )                                                            \
+    traceREADDED_TASK_TO_READY_STATE( pxTCB );                                                      \
+    taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                             \
+    vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) ); \
+    tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 /*-----------------------------------------------------------*/
 
 /*
@@ -1672,7 +1683,8 @@ static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 					{
 						mtCOVERAGE_TEST_MARKER();
 					}
-					prvAddTaskToReadyList( pxTCB );
+
+					prvReaddTaskToReadyList( pxTCB );
 				}
 				else
 				{
@@ -1734,6 +1746,7 @@ static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 				mtCOVERAGE_TEST_MARKER();
 			}
 
+			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 
 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
@@ -3882,6 +3895,20 @@ static void prvCheckTasksWaitingTermination( void )
 #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
 /*-----------------------------------------------------------*/
 
+#if (INCLUDE_pxTaskGetStackStart == 1)
+    uint8_t* pxTaskGetStackStart( TaskHandle_t xTask)
+    {
+        TCB_t *pxTCB;
+        UBaseType_t uxReturn;
+        (void)uxReturn;
+
+        pxTCB = prvGetTCBFromHandle( xTask );
+        return ( uint8_t * ) pxTCB->pxStack;
+    }
+
+#endif /* INCLUDE_pxTaskGetStackStart */
+/*-----------------------------------------------------------*/
+
 #if ( INCLUDE_vTaskDelete == 1 )
 
 	static void prvDeleteTCB( TCB_t *pxTCB )
@@ -4056,7 +4083,7 @@ TCB_t *pxTCB;
 
 					/* Inherit the priority before being moved into the new list. */
 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
-					prvAddTaskToReadyList( pxMutexHolderTCB );
+					prvReaddTaskToReadyList( pxMutexHolderTCB );
 				}
 				else
 				{
@@ -4146,7 +4173,7 @@ TCB_t *pxTCB;
 					any other purpose if this task is running, and it must be
 					running to give back the mutex. */
 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
-					prvAddTaskToReadyList( pxTCB );
+					prvReaddTaskToReadyList( pxTCB );
 
 					/* Return true to indicate that a context switch is required.
 					This is only actually required in the corner case whereby
@@ -4669,7 +4696,9 @@ TickType_t uxReturn;
 
 		taskENTER_CRITICAL();
 		{
+		    /* traceTASK_NOTIFY_TAKE(); not modified */
 			traceTASK_NOTIFY_TAKE();
+
 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 
 			if( ulReturn != 0UL )
@@ -4742,6 +4771,7 @@ TickType_t uxReturn;
 
 		taskENTER_CRITICAL();
 		{
+		    /* traceTASK_NOTIFY_WAIT(); not modified */
 			traceTASK_NOTIFY_WAIT();
 
 			if( pulNotificationValue != NULL )
@@ -4840,6 +4870,7 @@ TickType_t uxReturn;
 					break;
 			}
 
+			/* traceTASK_NOTIFY(); not modified */
 			traceTASK_NOTIFY();
 
 			/* If the task is in the blocked state specifically to wait for a
@@ -4972,6 +5003,7 @@ TickType_t uxReturn;
 					break;
 			}
 
+			/* traceTASK_NOTIFY_FROM_ISR(); not modified */
 			traceTASK_NOTIFY_FROM_ISR();
 
 			/* If the task is in the blocked state specifically to wait for a
@@ -5060,6 +5092,7 @@ TickType_t uxReturn;
 			semaphore. */
 			( pxTCB->ulNotifiedValue )++;
 
+			/* traceTASK_NOTIFY_GIVE_FROM_ISR(); not modified */
 			traceTASK_NOTIFY_GIVE_FROM_ISR();
 
 			/* If the task is in the blocked state specifically to wait for a
@@ -5208,6 +5241,7 @@ const TickType_t xConstTickCount = xTickCount;
 			/* Add the task to the suspended task list instead of a delayed task
 			list to ensure it is not woken by a timing event.  It will block
 			indefinitely. */
+		    traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 		}
 		else
@@ -5224,12 +5258,14 @@ const TickType_t xConstTickCount = xTickCount;
 			{
 				/* Wake time has overflowed.  Place this item in the overflow
 				list. */
+			    traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 			}
 			else
 			{
 				/* The wake time has not overflowed, so the current block list
 				is used. */
+			    traceMOVED_TASK_TO_DELAYED_LIST();
 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 
 				/* If the task entering the blocked state was placed at the
@@ -5259,11 +5295,13 @@ const TickType_t xConstTickCount = xTickCount;
 		if( xTimeToWake < xConstTickCount )
 		{
 			/* Wake time has overflowed.  Place this item in the overflow list. */
+		    traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 		}
 		else
 		{
 			/* The wake time has not overflowed, so the current block list is used. */
+		    traceMOVED_TASK_TO_DELAYED_LIST();
 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 
 			/* If the task entering the blocked state was placed at the head of the
